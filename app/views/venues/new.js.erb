
<% if @already_suggested_venue and current_user.id != @event.owner_id %>
    $("#notice").text("You have already suggested a venue for this event. Try removing your existing venue.").fadeIn().delay(3000).fadeOut(1000);

<% else %> {
    //$('#createVenueForm').dialog("open");
    $('#createVenueForm').html("<%= escape_javascript(render 'form') %>");
    $('#createVenueForm').dialog('open');
    $('#createVenueForm').prepend("<%= escape_javascript(render 'help_dialog') %>");
    $('#venue-dialog-help-btn').remove();
    $('.ui-dialog:eq(0) .ui-dialog-titlebar').append('<button class = "ui-dialog-titlebar-close" id ="venue-dialog-help-btn" data-remote = "true">?</button>');

    AC();


    $("#venue-dialog-help-btn").click(function(event) {
      event.preventDefault();
      $("#venue-dialog-help-dialog").fadeIn(500);
    });

    $(".close-help-dialog").click(function(event) {
      event.preventDefault();
      $(this).parent().parent('.help-dialog').fadeOut(500);
    });
}
<% end %>

/********************
YELP API AJAX REQUEST FUNCTIONS
 *********************/

function AC(){
/*  $("#venue_name").keyup(function(event) {
        query = $("#venue_name").val().toString();
        if (query.length > 4) {
            yelpRequest(query, response);
        }

    });*/
$( "#venue_name" ).autocomplete({
    source: function(request, response) {
          yelpRequest(request, response);
    },
    autoFocus: true,
    minLength: 3,
    delay: 500,
    select: function( event, ui ) {
        /*var addy = ""
        ui.item.address.forEach(function(line) {
            addy += line + "\n";
        });*/
        $("#venue_address").val(ui.item.address);
        $("#venue_url").val(ui.item.url)

    },
    open: function() {
        $( this ).removeClass( "ui-corner-all" ).addClass( "ui-corner-top" );
    },
    close: function() {
        $( this ).removeClass( "ui-corner-top" ).addClass( "ui-corner-all" );
    }
});
}


function yelpRequest(request, response) {
    //console.log(request.term);
    var auth = {
        //
        // Update with your auth tokens.
        //
        consumerKey: '<%= escape_javascript(YelpTokens::TOKENS[:consumerKey]) %>',
        consumerSecret: '<%= escape_javascript(YelpTokens::TOKENS[:consumerSecret]) %>',
        accessToken: '<%= escape_javascript(YelpTokens::TOKENS[:accessToken]) %>',
        // This example is a proof of concept, for how to use the Yelp v2 API with javascript.
        // You wouldn't actually want to expose your access token secret like this in a real application.
        accessTokenSecret: '<%= escape_javascript(YelpTokens::TOKENS[:accessTokenSecret]) %>',
        serviceProvider: {
            signatureMethod: "HMAC-SHA1"
        }
    };
    //var term = "soda popinski"
    var near = 'San+Francisco';
    var accessor = {
        consumerSecret: auth.consumerSecret,
        tokenSecret: auth.accessTokenSecret
    };

    parameters = [];
    parameters.push(['term', request.term]);
    parameters.push(['location', near]);
    parameters.push(['callback', 'cb']);
    parameters.push(['oauth_consumer_key', auth.consumerKey]);
    parameters.push(['oauth_consumer_secret', auth.consumerSecret]);
    parameters.push(['oauth_token', auth.accessToken]);
    parameters.push(['oauth_signature_method', 'HMAC-SHA1']);
    //parameters.push(['featureClass', 'P']);
    //parameters.push(['style', 'full']);
    parameters.push(['limit', 5]);
    parameters.push(['sort', 0]);

    var message = {
        'action': 'http://api.yelp.com/v2/search',
        'method': 'GET',
        'parameters': parameters
    };

    OAuth.setTimestampAndNonce(message);
    OAuth.SignatureMethod.sign(message, accessor);

    var parameterMap = OAuth.getParameterMap(message.parameters);
    parameterMap.oauth_signature = OAuth.percentEncode(parameterMap.oauth_signature)

    $.ajaxSetup({
        beforeSend: function(){
            $('#venue-loading-gif').css('visibility', 'visible');
        },
        complete: function(){
             $('#venue-loading-gif').css('visibility', 'hidden');
        }
    });

    $.ajax({

        'url': message.action,
        'data': parameterMap,
        'cache': true,
        'dataType': 'jsonp',
        'success' : function(data) {
            console.log(data.businesses);
            //var matcher = new RegExp( "^" + $.ui.autocomplete.escapeRegex( request.term ), "i" );
            var matcher = new RegExp("^(" + request.term + ")", "i");
            response($.map(data.businesses, function(item){
                if (matcher.test(item.name)) {
                    
                    //format address string
                    var location = item.location;
                    var addy = "";

                   /* for (line in location) {
                        addy += location[line] + "\n";
                    } */
                    if(location.cross_streets != undefined) {
                        addy += location.address;
                    }
                    if(location.cross_streets != undefined) {
                        addy += " (b/t " + location.cross_streets + ")";
                    }
                    if(location.city != undefined) {
                        addy += "\n" + location.city;
                    }
                    if(location.state_code != undefined) {
                        addy += ", " + location.state_code;
                    }  
                    if(location.postal_code != undefined) {
                        addy += " " + location.postal_code;
                    }                      
                   //format item name
                   var item_name = (location.neighborhoods == undefined ? 
                            item.name : item.name + " (" + location.neighborhoods[0] + ")");

                   return {
                        label: item_name,
                        value: item_name,
                        address: addy,
                        //neighborhood: item.location.neighborhood[0],
                        url: item.url
                    }
                }
            }));
        }});
            /*var matcher = new RegExp( "^" + $.ui.autocomplete.escapeRegex( request.term ), "i" );
            response( $.grep( data.businesses, function( item ){
                    return (matcher.test(item.name))
            }*/
}
/********************
END YELP API AJAX REQUEST FUNCTIONS
 *********************/